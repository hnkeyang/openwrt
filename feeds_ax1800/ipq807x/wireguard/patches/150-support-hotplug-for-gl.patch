Index: wireguard-linux-compat-1.0.20211208/src/Kbuild
===================================================================
--- wireguard-linux-compat-1.0.20211208.orig/src/Kbuild
+++ wireguard-linux-compat-1.0.20211208/src/Kbuild
@@ -7,7 +7,7 @@ ccflags-y += -Wframe-larger-than=2048
 ccflags-$(CONFIG_WIREGUARD_DEBUG) += -DDEBUG -g
 ccflags-$(if $(WIREGUARD_VERSION),y,) += -D'WIREGUARD_VERSION="$(WIREGUARD_VERSION)"'
 
-wireguard-y := main.o noise.o device.o peer.o timers.o queueing.o send.o receive.o socket.o peerlookup.o allowedips.o ratelimiter.o cookie.o netlink.o
+wireguard-y := main.o noise.o device.o peer.o timers.o queueing.o send.o receive.o socket.o peerlookup.o allowedips.o ratelimiter.o cookie.o netlink.o hotplug.o
 
 include $(src)/crypto/Kbuild.include
 include $(src)/compat/Kbuild.include
Index: wireguard-linux-compat-1.0.20211208/src/noise.c
===================================================================
--- wireguard-linux-compat-1.0.20211208.orig/src/noise.c
+++ wireguard-linux-compat-1.0.20211208/src/noise.c
@@ -9,6 +9,7 @@
 #include "messages.h"
 #include "queueing.h"
 #include "peerlookup.h"
+#include "hotplug.h"
 
 #include <linux/rcupdate.h>
 #include <linux/slab.h>
@@ -819,6 +820,8 @@ bool wg_noise_handshake_begin_session(st
 		ret = wg_index_hashtable_replace(
 			handshake->entry.peer->device->index_hashtable,
 			&handshake->entry, &new_keypair->entry);
+
+		wireguard_hotplug(handshake->entry.peer->device->dev->name, KEYPAIR_CREATED_EVENT);
 	} else {
 		kfree_sensitive(new_keypair);
 	}
Index: wireguard-linux-compat-1.0.20211208/src/timers.c
===================================================================
--- wireguard-linux-compat-1.0.20211208.orig/src/timers.c
+++ wireguard-linux-compat-1.0.20211208/src/timers.c
@@ -8,6 +8,7 @@
 #include "peer.h"
 #include "queueing.h"
 #include "socket.h"
+#include "hotplug.h"
 
 /*
  * - Timer for retransmitting the handshake if we don't hear back after
@@ -60,6 +61,8 @@ static void wg_expired_retransmit_handsh
 		if (!timer_pending(&peer->timer_zero_key_material))
 			mod_peer_timer(peer, &peer->timer_zero_key_material,
 				       jiffies + REJECT_AFTER_TIME * 3 * HZ);
+
+		wireguard_hotplug(peer->device->dev->name, REKEY_GIVEUP_EVENT);
 	} else {
 		++peer->timer_handshake_attempts;
 		pr_debug("%s: Handshake for peer %llu (%pISpfsc) did not complete after %d seconds, retrying (try %d)\n",
@@ -73,6 +76,8 @@ static void wg_expired_retransmit_handsh
 		wg_socket_clear_peer_endpoint_src(peer);
 
 		wg_packet_send_queued_handshake_initiation(peer, true);
+
+		wireguard_hotplug(peer->device->dev->name, REKEY_TIMEOUT_EVENT);
 	}
 }
 
